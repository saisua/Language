{
    "Reserved-regex":{
        "Tag":"(?=[^\\\\]|^)~(.*?((?=[^\\\\])~)|\\[\\d+\\]~)",
        "Call":"(?=[^\\\\]|^)\\[(.*?)(\\|.*?){0,2}(?=[^\\\\])\\]",
        "Upper-call":"(?=[^\\\\]|^)\\((.*?)(((?=[^\\\\])\\))|(\\|(.*?)(?=[^\\\\])\\)))",
        "Variable":"(?=[^\\\\]|^)@(.*?((?=[^\\\\])@)|\\[\\d+\\]@)",
        "Arguments":"(?=[^\\\\]|^){(\\w+)}"
    },

    "line":{
        "end":"\\n",
        "var-strategy":"use as many"
    },

    "__comment1":"Think some way to call sub-lines",
    "__comment2":"In case of being able to use a register/variable",
    "__comment3":"twice, (pex addi $1, $1, 1), it *must* be done that",
    "__comment4":"way, and the compiler would choose based on an algorithm",
    "__comment5":"wether or not choose another reg/var",
    "__comment6":"If the code does not depend on any external reg/var",
    "__comment7":"It should be calculated at compile time, or optimized.",

    "mask":{
        "last-bit":[
            "addi @reg[1]@, $zero, -1",
            "srl @reg[1]@, @reg[1]@, 1",
            "[bool_strict_not|{result}|@reg[1]@]"
        ]
    },

    "bool":{
        "strict":{
            "not":"not {result}, {arg1}",
            "and":"and {result}, {arg1}, {arg2}",
            "or":"or {result}, {arg1}, {arg2}",
            "xor":"xor {result}, {arg1}, {arg2}",
            "same":[
                "[bool_strict_xor|@reg[0]@|{arg1}, {arg2}]",
                "[bool_strict_not|{result}|@reg[0]@]"
            ],
            "not same":"[bool_strict_xor|{result}|{arg1}, {arg2}]"
        },
        "less than":[
            "sub @reg[0]@, {arg1}, {arg2}",
            "[mask_last-bit|{@reg[1]@}]",
            "[bool_strict_and|{result}|@reg[0]@, @reg[1]@]"
        ],
        "greater than":[
            "sub @reg[0]@, {arg1}, {arg2}",
            "[mask_last-bit|{@reg[1]@}]",
            "[bool_strict_xor|{result}|@reg[0]@, @reg[1]@]"
        ],
        "less or equal than":"[bool_greater than|{result}|{arg2},{arg1}]",
        "greater or equal than":"[bool_less than|{result}|{arg2},{arg1}]"
    },

    "if":{
        "bool":{
            "strict":{
                "not":"bnez {struct}, {arg1}",
                "and":[
                    "[bool_strict_and|@reg[0]@|{arg1}, {arg2}]",
                    "bnez {struct}, @reg[0]@"
                ],
                "or":[
                    "[bool_strict_or|@reg[0]@|{arg1}, {arg2}]",
                    "bnez {struct}, @reg[0]@"
                ],
                "xor":[
                    "[bool_strict_xor|@reg[0]@|{arg1}, {arg2}]",
                    "bnez {struct}, @reg[0]@"
                ],
                "same":"beq {struct}, {arg1}, {arg2}",
                "not same":"bne {struct}, {arg1}, {arg2}"
            },
            "less than":"blt {struct}, {arg1}, {arg2}",
            "greater than":"bgt {struct}, {arg1}, {arg2}",
            "less or equal than":"ble {struct}, {arg1}, {arg2}",
            "greater or equal than":"bge {struct}, {arg1}, {arg2}f"
        }
    }
}