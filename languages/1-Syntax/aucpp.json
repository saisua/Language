{
    "Reserved-regex":{
        "Tag":"%",

        "utils":[
            "var_handler//var_handler"
        ]
    },

    "_comment_compilerTag1":"The tags the compiler will use to mark every line/struct",
    "_comment_compilerTag2":"to add functionality/restrictions/optimizations",
    "compilerTag":[
        "immutable",
        "const",
        "final",
        "local(\\s+\\d+)?"
    ],

    "var":"[A-Za-z_]\\w*?",

    "type" : {
        "integer":"int",
        "character":"char",
        "string":"str",
        "boolean":"bool",
        "float":"float",
        "double":"double"
    },
    "primitive":{
        "int":"\\d+",
        "char":"\\'[^\\']?\\'",
        "str":"\\\"((?!\\\\)[^\\\"])*?\\\"",
        "bool":[
            "true",
            "false"
        ],
        "float":"\\d*\\.(f|\\d+f?)",
        "double":"\\d*\\.(d|\\d+d)"
    },

    "t-bool":{
        "Boolean":"%t-bool_LBoolean%%t-bool_RBoolean%",
        
        "negation":"not\\s",
        "LBoolean":[
            "%t-bool_negation%?\\s*%var%",
            "%t-bool_negation%?\\s*\\d+"
        ],
        "RBoolean":[
            "\\s*%t-bool_operation%\\s*%t-bool_LBoolean%\\s*",
            "\\s*%t-bool_operation_strict%\\s*%primitive_bool%\\s*"
        ],

        "operation":{
            "strict":{
                "not":"(?=\\W)not\\W",
                "and":"(?=\\W)and\\W",
                "or":"(?=\\W)or\\W",
                "xor":"(?=\\W)xor\\W",
                "equals":"==",
                "not equals":"!=",
                "same":" is ",
                "not same":" is not "
            },
            "less than":"<",
            "greater than":">",
            "less or equal than":"<=",
            "greater or equal than":">="
        }
    },

    "arithmetic":{
        "addition":"\\+",
        "subtraction":"\\-",
        "multiplication":"\\*",
        "division":"\\/",
        "modulo":"\\%",
        "exponentiation":"\\^"
    },
    
    "_comment_struct1":"To define structures. The compiler will recognize a structure has started",
    "_comment_struct2":"when it sees one struct_start. Then, it will check every line with de data",
    "_comment_struct3":"in pattern. For each start, must respect every start or end of line in it",
    "_comment_struct4":"and keep the structure until the end of the struct. Overrides general per",
    "_comment_struct5":"line restrictions",
    "struct":{
        "start":[
            ":",
            "{"
        ],
        "pattern":{
            ":":{
                "startLine":"\\t"
            },
            "{":{
                "endStruct":"}"
            }
        }
    },

    "_comment_line":"On every line, aditional data that helps the compiler understant the code better",
    "line":[
        {
            "end":[";", "\\n"],

            "_priority_comment1":"The compiler will look for any signs of any order of",
            "_priority_comment2":"execution. Per example a and (b or c). Here, 'b or c'",
            "_priority_comment3":"must be executed first. To not be misleaded by any other",
            "_priority_comment4":"character in the code, the priority characters must",
            "_priority_comment5":"follow some optional before-parameters. Here, to be safe",
            "_priority_comment6":"when finding a function call, any parenthesis found must",
            "_priority_comment7":"not be next to any alphanum character 'function(arg)'.",
            "_priority_comment8":"On search, search for ((start_ahead+start) | (start)). If ",
            "_priority_comment9":"the match is on the first group, remove it. It should be",
            "_priority_comment10":"searched first start/end if one of them has ahead. Otherwise",
            "_priority_comment11":"remove them all. If one of them has ahead, must be kept the",
            "_priority_comment12":"closest instance (either in front or behind) of the other",
            "_priority_comment13":"start/end, but only if keep_pairs is true.",
            "priority":[
                {
                    "start_ahead":"(?<!\\w)",
                    "start":"\\(",
                    "end":"\\)",

                    "keep_pairs":true
                }
            ]
        }
    ],
    
    "comment":"# .*",
    "compilerData":"//[0-9A-F]+",

    "test":{
        "test1":"%test3%",
        "test2":"%t-bool_operation_strict_and%"
    },
    "test3":{
        "test4":"%t-bool_operation_less than%",
        "test5":"hello its me"
    },

    "_comment_standalones":"Standalones are the general instructions that will start on every newline.",
    "standalones":{
        "print":[
            "print\\(%primitive%\\)",
            "print\\s+%primitive%"
        ],
        "test":"test\\(%test%\\)"
    }
}